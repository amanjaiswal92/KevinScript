_ -> StatementList

StatementList -> Statement | Statement StatementList

Statement -> AssignmentStatement
Statement -> WhileStatement
Statement -> ForStatement
Statement -> IfStatement
Statement -> FunctionDeclarationStatement
Statement -> ExpressionStatement
Statement -> ReturnStatement
Statement -> EmptyStatement

AssignmentStatement -> identifier = Expression ; | AttributeRef = Expression ;
WhileStatement -> while ( Expression ) { StatementList }
ForStatement -> for ( identifier in Expression ) { StatementList }
IfStatement -> if ( Expression ) { StatementList }
IfStatement -> if ( Expression ) { StatementList } else { StatementList }
FunctionDeclarationStatement -> function identifier ( ) { StatementList }
FunctionDeclarationStatement -> function identifier ( FunctionDeclarationArgumentList ) { StatementList }
ExpressionStatement -> Expression ;
ReturnStatement -> return Expression ;
EmptyStatement -> ;

Atom -> identifier | Literal | Enclosure
Literal -> number | string_literal
Enclosure -> ( Expression ) | ListDisplay | DictDisplay
Primary -> Atom | Call | AttributeRef
Call -> Primary ( ExpressionList ) | Primary ( )
AttributeRef -> Primary . identifier

ListDisplay -> [ ] | [ ExpressionList ]
DictDisplay -> { } | { KeyValueList }
KeyValueList -> KeyValuePair | KeyValuePair , KeyValueList
KeyValuePair -> Expression : Expression

#operator precedence: [* / %], [+ -], [!= == > <], [and or]
MultExpression -> Primary | MultExpression mult_operator Primary
AddExpression -> MultExpression | AddExpression add_operator MultExpression
CompExpression -> AddExpression | CompExpression comp_operator AddExpression
BinOpExpression -> CompExpression | BinOpExpression bin_operator CompExpression
Expression -> BinOpExpression | FunctionDeclaration

#function declaration style that may be used within an expression.
#not to be confused with FunctionDeclarationStatement, which cannot.
FunctionDeclaration -> function( FunctionDeclarationArgumentList ) { StatementList } | function() { StatementList }
FunctionDeclarationArgumentList -> IdentifierList

IdentifierList -> identifier | identifier , IdentifierList
ExpressionList -> Expression | Expression , ExpressionList

mult_operator -> mul | div | mod
add_operator -> add | sub
comp_operator -> ne | eq | gt | lt
bin_operator -> and | or
mul -> *
div -> /
mod -> %
add -> +
sub -> -
ne -> !=
eq -> ==
gt -> >
lt -> <
and -> 'and'
or -> 'or'

#proposed syntax for potential class feature
Statement -> ClassDeclarationStatement
ClassDeclarationStatement -> class ClassHeader { FunctionDeclarationStatementList } | class ClassHeader { }
ClassHeader -> identifier | identifier ( identifier )
FunctionDeclarationStatementList -> FunctionDeclarationStatement | FunctionDeclarationStatement FunctionDeclarationStatementList